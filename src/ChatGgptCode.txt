#include <IRremote.h>

// Pin-Definitionen
const int button1 = 2;
const int button2 = 3;
const int button3 = 4;
const int irPin = 5;
const int pwmPin = 9;
const int motorDir1 = 6;
const int motorDir2 = 7;

// IR-Receiver
IRrecv irrecv(irPin);
decode_results results;

// Zustände der Maschine
enum State {
    IDLE,
    MOTOR_STOP,
    MOTOR_DRIVE_CCW,
    MOTOR_DRIVE_CW,
    PLAY_MUSIC
};

State currentState = IDLE;

void setup() {
    pinMode(button1, INPUT_PULLUP);
    pinMode(button2, INPUT_PULLUP);
    pinMode(button3, INPUT_PULLUP);
    pinMode(motorDir1, OUTPUT);
    pinMode(motorDir2, OUTPUT);
    pinMode(pwmPin, OUTPUT);
    irrecv.enableIRIn();
    Serial.begin(9600);
}

void loop() {
    // Knöpfe auslesen
    if (digitalRead(button1) == LOW) {
        currentState = MOTOR_DRIVE_CW;
    } else if (digitalRead(button2) == LOW) {
        currentState = MOTOR_DRIVE_CCW;
    } else if (digitalRead(button3) == LOW) {
        currentState = PLAY_MUSIC;
    }

    // IR-Signal verarbeiten
    if (irrecv.decode(&results)) {
        switch (results.value) {
            case 0xFFA25D: // Beispielcode für "Stopp"
                currentState = MOTOR_STOP;
                break;
            case 0xFF629D: // Beispielcode für "Vorwärts"
                currentState = MOTOR_DRIVE_CW;
                break;
            case 0xFFE21D: // Beispielcode für "Rückwärts"
                currentState = MOTOR_DRIVE_CCW;
                break;
            case 0xFF22DD: // Beispielcode für "Musik"
                currentState = PLAY_MUSIC;
                break;
            default:
                break;
        }
        irrecv.resume();
    }

    // Zustandsmaschine
    switch (currentState) {
        case MOTOR_STOP:
            stopMotor();
            break;
        case MOTOR_DRIVE_CW:
            driveMotor(true);
            break;
        case MOTOR_DRIVE_CCW:
            driveMotor(false);
            break;
        case PLAY_MUSIC:
            playMusic();
            break;
        case IDLE:
        default:
            break;
    }
}

void stopMotor() {
    digitalWrite(motorDir1, LOW);
    digitalWrite(motorDir2, LOW);
    analogWrite(pwmPin, 0);
}

void driveMotor(bool clockwise) {
    if (clockwise) {
        digitalWrite(motorDir1, HIGH);
        digitalWrite(motorDir2, LOW);
    } else {
        digitalWrite(motorDir1, LOW);
        digitalWrite(motorDir2, HIGH);
    }
    analogWrite(pwmPin, 150); // Geschwindigkeit setzen
}

void playMusic() {
    Serial.println("Playing music...");
    delay(1000); // Platzhalter für Musikcode
}
